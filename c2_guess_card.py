'''问题描述【猜牌术】
「假设桌子上有13个空盒子排成一圈，
设定其中一个盒子序号为1，将黑桃A放入1号盒子中，接着从下一个空盒子开始重新计数，
当数到第2个空盒子时，将黑桃2放入其中。
然后再从下一个空盒子开始重新计数，数到第3个空盒子时，将黑桃3放入其中，这样依次进行下去，
直到将13张牌全部放入空盒子中为止。


需要注意的是，在计数过程中要跳过那些已放入牌的盒子，
而只对空盒子计数。最后牌在盒子中的顺序就是魔术师手中牌的顺序」
'''

'''算法分析
循环实现，
完成条件：当找到对应的空盒子将牌存入
'''

'''实现步骤
变量i   表示牌的序号
变量j   表示数组的下标（盒子的序号）
变量n   表示当前的空盒序号，初值为1
'''

# 初始化列表，用來存儲13張牌
a = [0]*14 
# 數組下標，空盒子的序號
j = 1 
for i in range(1,14):
    # 用來記錄當前的空盒序號，初值為1
    n = 1 
    while n<=i:
        if j> 13:
            j = 1
        # 盒子非空，跳過該盒子
        if a[j]:
            j+= 1
        # 判斷該盒子是否為第i個空盒
        else:
            if n==i:
                # 是則將i存入
                a[j]=i
            j+=1
            n+=1
print(a[1:])
